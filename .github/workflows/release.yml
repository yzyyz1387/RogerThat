name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: msbuild /p:Configuration=Release /p:Platform="Any CPU" /restore RogerThat/RogerThat.csproj
    
    - name: Publish
      run: dotnet publish RogerThat/RogerThat.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:EnableCompressionInSingleFile=true -p:DebugType=None -p:DebugSymbols=false -o publish
    
    - name: Create ZIP archive
      run: |
        cd publish
        7z a -tzip -snc -scsUTF-8 ../RogerThat-${{ github.event.release.tag_name }}.zip *
      
    # 上传到 GitHub Release
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: RogerThat-${{ github.event.release.tag_name }}.zip
    
    # 同时作为 artifact 上传（供 sync-to-gitee 使用）
    - name: Upload Release Asset as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-asset
        path: RogerThat-${{ github.event.release.tag_name }}.zip

  sync-to-gitee:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 下载 release 资产
      - name: Download Release Asset
        uses: actions/download-artifact@v4
        with:
          name: release-asset
          path: .

      # 配置 Git
      - name: Configure Git for Gitee
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GITEE_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan gitee.com >> ~/.ssh/known_hosts
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # 同步到 Gitee
      - name: Push to Gitee
        run: |
          git remote add gitee git@gitee.com:yzyyz1387/RogerThat.git
          git fetch --unshallow || true
          git push -f gitee --all
          git push -f gitee --tags

      # 创建 Gitee Release
      - name: Create Gitee Release
        run: |
          echo "Creating Gitee release for tag ${{ github.event.release.tag_name }}"
          RESPONSE=$(curl -s --header 'Content-Type: application/json' \
               --header 'Accept: application/json' \
               --data-binary "{
                 \"access_token\": \"${{ secrets.GITEE_ACCESS_TOKEN }}\",
                 \"tag_name\": \"${{ github.event.release.tag_name }}\",
                 \"name\": \"${{ github.event.release.name }}\",
                 \"body\": \"${{ github.event.release.body }}\",
                 \"prerelease\": ${{ github.event.release.prerelease }}
               }" \
               --request POST \
               https://gitee.com/api/v5/repos/yzyyz1387/RogerThat/releases)
          echo "Create release response: $RESPONSE"
          
          # 检查是否创建成功
          if echo "$RESPONSE" | grep -q "error"; then
            echo "Failed to create release. Trying to get existing release..."
            RELEASE_ID=$(curl -s \
              -H "Content-Type: application/json" \
              "https://gitee.com/api/v5/repos/yzyyz1387/RogerThat/releases/tags/${{ github.event.release.tag_name }}?access_token=${{ secrets.GITEE_ACCESS_TOKEN }}" \
              | jq -r '.id')
          else
            RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          fi
          
          echo "Release ID: $RELEASE_ID"
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Failed to get release ID"
            exit 1
          fi
          
          # 保存 release ID 供后续使用
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      # 上传 Release 资产
      - name: Upload Release Asset to Gitee
        run: |
          if [ -z "$RELEASE_ID" ]; then
            echo "No release ID found"
            exit 1
          fi
          
          if [ ! -f "RogerThat-${{ github.event.release.tag_name }}.zip" ]; then
            echo "Release asset file not found!"
            ls -la
            exit 1
          fi
          
          echo "Uploading asset to Gitee release $RELEASE_ID"
          RESPONSE=$(curl -s \
            --header "Content-Type: application/octet-stream" \
            --upload-file "RogerThat-${{ github.event.release.tag_name }}.zip" \
            "https://gitee.com/api/v5/repos/yzyyz1387/RogerThat/releases/${RELEASE_ID}/assets?access_token=${{ secrets.GITEE_ACCESS_TOKEN }}&name=RogerThat-${{ github.event.release.tag_name }}.zip")
          
          echo "Upload response: $RESPONSE"
          if echo "$RESPONSE" | grep -q "error"; then
            echo "Failed to upload asset"
            exit 1
          fi

  update-version:
    needs: [build, sync-to-gitee]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML requests
    
    - name: Get release info and create JSON
      run: |
        python .github/scripts/create_version_json.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ github.event.release.tag_name }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'dist'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 